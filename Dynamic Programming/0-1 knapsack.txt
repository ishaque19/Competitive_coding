  You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. 
  Note that we have only one quantity of each item.
In other words, given two integer arrays val[0..N-1] and wt[0..N-1] which represent values and weights associated with N items respectively. 
Also given an integer W which represents knapsack capacity, 
find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. You cannot break an item, 
either pick the complete item or donâ€™t pick it (0-1 property).
  public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       int dp[n][W+1];
       for(int i=0;i<n;i++){
           dp[i][0]=0; //if bag weight is zero no obj is allowed to taken
       }
       for(int i=1;i<=W;i++){ //for filling first row
           if(wt[0]>i){
               dp[0][i]=0;
           }
           else{
               dp[0][i]=val[0];
           }
       }
       
       for(int i=1;i<n;i++){ //rows
           for(int j=1;j<=W;j++){ //from weight 1 to W
               if(wt[i]<=j){
                   dp[i][j]=max(val[i]+dp[i-1][j-wt[i]],dp[i-1][j]);
               }
               else{
                   dp[i][j]=dp[i-1][j];
               }
           }
       }
       
       return dp[n-1][W];
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------

public:
    struct node{
        int weight;
        int value;
        double val_per_weight;
    };
    static bool mysort(struct node &a,struct node &b){
        return (a.val_per_weight)>(b.val_per_weight);
    }
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       //greedy
       struct node arr[n];
       int res=0;
       for(int i=0;i<n;i++){
           arr[i].weight=wt[i];
           arr[i].value=val[i];
           arr[i].val_per_weight=(double)val[i]/(double)wt[i];
       }
       
       sort(arr,arr+n,mysort); //descending order
       /*for(int i=0;i<n;i++){
           cout<<arr[i].weight<<" "<<arr[i].val_per_weight<<endl;
        }*/
        
        for(int i=0;i<n;i++){
            if(arr[i].weight<=W){
                res+=arr[i].value;
                W-=arr[i].weight;
            }
            
        }
       return res;
    }
};

 