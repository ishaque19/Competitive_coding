Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
        }
        if(sum%2!=0)
            return false;
        //cout<<"check"<<endl;
        int target=sum/2;
        bool dp[nums.size()+1][target+1];
        for(int i=0;i<=target;i++){
            dp[0][i]=false;
        }
        dp[0][0]=true;
        for(int i=1;i<=nums.size();i++){
            dp[i][0]=true;
        }
        
        for(int i=1;i<=nums.size();i++){
            for(int j=1;j<=target;j++){
                if(nums[i-1]>j){
                    dp[i][j]=dp[i-1][j];
                }
                else{
                    dp[i][j]=dp[i-1][j] || dp[i-1][j-nums[i-1]];
                }
          //      cout<<dp[i][j]<<" ";
            }
           // cout<<endl;
        }
        
        //cout<<dp[nums.size()][target];
        
        if(!dp[nums.size()][target])
            return false;
        //check whether rem subset forms the target
        //cout<<"check";
        vector<int> partition1(nums.size(),0);
        int i=nums.size(),j=target;
        while(i>0){
            if(dp[i][j] && !dp[i-1][j]){
                partition1[i-1]=1;
                j=j-nums[i-1];
            }
            i--;
        }
       // for(auto x:partition1){
         //   cout<<endl;
           // cout<<x<<" ";
        //}
        int balance=0;
        for(auto x=0;x<nums.size();x++){
            if(partition1[x]==0){
                balance+=nums[x];
            }
        }
        
        if(balance==target)
            return true;
        
        return false;
    }
};