Given a number N. Find the minimum number of operations required to reach N starting from 0. You have 2 operations available:

Double the number
Add one to the number


    int target;
    int res=1;
    int backtrack(int x,int steps){
        if(x==target){
            return steps;
        }
        else if(x>target){
            return INT_MAX;
        }
        else{
            return min(backtrack(x+1,steps+1),backtrack(x*2,steps+1));
        }
            
    }
    int minOperation(int n)
    {
        //code here.
        /*target=n;
        return backtrack(1,1);*/
        
        int arr[n+1];
        arr[0]=0;
        arr[1]=1;
        for(int i=2;i<=n;i++){
        if(i%2==0)
            arr[i]=min(arr[i-1],arr[i/2])+1;
        else
            arr[i]=arr[i-1]+1;
        }
        
        return arr[n];
    }