Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

class Solution {
public:
    int minInsertions(string s) {
        if(s.size()==1)
            return 0;
        vector<vector<int>> dp(s.size(),vector<int>(s.size(),0)); //initialize of 2d array;
        for(int i=0;i+1<s.size();i++){ //size of 2
            if(s[i]!=s[i+1]){
                dp[i][i+1]=1;
            }
        }
        
        for(int i=2;i<s.size();i++){ //gap
            for(int j=0,k=i;k<s.size();j++,k++){
                if(s[j]==s[k])
                    dp[j][k]=dp[j+1][k-1]+0;
                else
                    dp[j][k]=min(dp[j+1][k],dp[j][k-1])+1;
            }
        }
        
        cout<<dp[0][s.size()-1];
        return dp[0][s.size()-1];
    }
};