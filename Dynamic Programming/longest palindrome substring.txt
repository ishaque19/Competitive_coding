Given a string s, return the longest palindromic substring in s.

class Solution {
public:
string longestPalindrome(string s) {
        int dp[s.size()][s.size()];
        for(int i=0;i<s.size();i++){
            for(int j=0;j<s.size();j++){
                dp[i][j]=0;
            }
        }
        int max=1;
        string res="";res+=s[0];
        for(int i=0;i<s.size();i++){ //len-1
            dp[i][i]=1;
        }
        for(int i=0,j=1;j<s.size();i++,j++){ //len-2
            if(s[i]==s[j]){
                dp[i][j]=1;
                max=2;
                res.clear();
                res+=s[i];
                res+=s[j];
            }
            else
                dp[i][j]=0;
        }
        //loop to move in diagonal fashion
    
        for(int i=2;i<s.size();i++){
            for(int j=0,k=i;k<s.size();j++,k++){
                if(s[j]==s[k] && dp[j+1][k-1]){
                    dp[j][k]=1;
                    if(max<i+1){
                        max=i+1;
                        res=s.substr(j,k-j+1);
                    }
                }
                else{
                    dp[j][k]=0;
                }
            }
        }
        
        
        return res;
    }
----------------------------------------------------------------------------------------------------
int longestPalSubstr(char* str) //efficient than former
{
    // The result (length of LPS)
    int maxLength = 1;

    int start = 0;
    int len = strlen(str);

    int low, high;

    // One by one consider every
    // character as center point of
    // even and length palindromes
    for (int i = 1; i < len; ++i) {
        // Find the longest even length palindrome
        // with center points as i-1 and i.
        low = i - 1;
        high = i;
        while (low >= 0 && high < len
               && str[low] == str[high]) {
            if (high - low + 1 > maxLength) {
                start = low;
                maxLength = high - low + 1;
            }
            --low;
            ++high;
        }

        // Find the longest odd length
        // palindrome with center point as i
        low = i - 1;
        high = i + 1;
        while (low >= 0 && high < len
               && str[low] == str[high]) {
            if (high - low + 1 > maxLength) {
                start = low;
                maxLength = high - low + 1;
            }
            --low;
            ++high;
        }
    }

    cout << "Longest palindrome substring is: ";
    printSubStr(str, start, start + maxLength - 1);

    return maxLength;
}
----------------------------------------------------------------------------------------------------
