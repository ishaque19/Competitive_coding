Given a string s, recursively remove adjacent duplicate characters from the string s. The output string should not have any adjacent duplicates.
 

Input:
The first line of input contains an integer T, denoting the no of test cases. Then T test cases follow. Each test case contains a string str.

Output:
For each test case, print a new line containing the resulting string.

Constraints:
1<=T<=100
1<=Length of string<=50.



#include <iostream>
#include<bits/stdc++.h>
using namespace std;
string remove_adajacent_duplicate(int index, string in){
    if(in==""){
        return "";
    }
    else if(index>=in.size()-1){
        return in;
    }
    else{
        if(index+1<in.size() && in[index]==in[index+1]){
            int temp_index=index;
            while(index+1<in.size() && in[index]==in[index+1]){
                index++;
            }
            in.erase(temp_index,index-temp_index+1);
            
            return remove_adajacent_duplicate(temp_index,in);
        }
        else{
            return remove_adajacent_duplicate(index+1,in);
        }
    }
}
int main() {
	int t;
	cin>>t;
	while(t--){
	    string x,x_prev="";
	    cin>>x;
	    while(x!=x_prev){
	        x_prev=x;
	        x=remove_adajacent_duplicate(0,x);
	   }
	   cout<<x<<endl;
	}
	return 0;
}