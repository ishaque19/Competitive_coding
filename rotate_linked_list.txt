Given a singly linked list of size N. 
The task is to rotate the linked list counter-clockwise by k nodes, where k is a given positive integer smaller than or equal to length of the linked list.

Input:
N = 5
value[] = {2, 4, 7, 8, 9}
k = 3
Output: 8 9 2 4 7
Explanation:
Rotate 1: 4 -> 7 -> 8 -> 9 -> 2
Rotate 2: 7 -> 8 -> 9 -> 2 -> 4
Rotate 3: 8 -> 9 -> 2 -> 4 -> 7

Your Task:
You don't need to read input or print anything. 
Your task is to complete the function rotate() which takes a head reference as the first argument and k as the second argument, and returns the head of the rotated linked list.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Node* rotate(Node* head, int k)
    {
        // Your code here
        if(!head)
            return head;
        Node *last,*temp;
        temp=head;
        for(int i=1;i<k;i++){
            //head as 1
            temp=temp->next;
        }
        last=temp;
        while(last->next){
            last=last->next;
        }
        last->next=head;
        head=temp->next;
        temp->next=NULL;
        
        return head;
    }