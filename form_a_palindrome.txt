Given a string, find the minimum number of characters to be inserted to convert it to palindrome.
For Example:
ab: Number of insertions required is 1. bab or aba
aa: Number of insertions required is 0. aa
abcd: Number of insertions required is 3. dcbabcd

//recursive approach

int fn(string x,int start,int end){
    if(start>=end){//only one char
        return 0;
    }//base case to exit
    else{
    if(x[start]==x[end]){
        return 0+fn(x,start+1,end-1);
    }
    else{
        return min((1+fn(x,start,end-1)),(1+fn(x,start+1,end)));
    }
    }
}
int main()
{
    
    string x;
    cin>>x;
    cout<<fn(x,0,x.size()-1);

    return 0;
}


//dynamic programming approach

class Solution{
    public:
    int countMin(string str){
        int n=str.size();
        int dp_table[n][n];
        //all diagonal elements are zero
        for(int i=0;i<n;i++){
            dp_table[i][i]=0;
        }
        for(int i=1;i<=n-1;i++){
            for(int j=0,k=i;k<=n-1;j++,k=i+j){
                if(k==j+1){
                    if(str[k]==str[j])
                        dp_table[j][k]=0;
                    else
                        dp_table[j][k]=1;
                }
                else{
                    if(str[k]==str[j]){
                        dp_table[j][k]=0+dp_table[j+1][k-1];
                    }    
                    else{
                        dp_table[j][k]=min(1+dp_table[j+1][k],1+dp_table[j][k-1]);   
                    }    
                }
            }
        }
       