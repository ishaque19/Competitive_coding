Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q 
as descendants (where we allow a node to be a descendant of itself).”


class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==q || root==p)
            return root;
        else{
            if(p->val>q->val){
                if(root->val>q->val && root->val<p->val)
                    return root;
            }
            if(p->val<q->val){
                if(root->val<q->val && root->val>p->val)
                    return root;
            }
            
            if(root->val<p->val && root->val<q->val){
                return lowestCommonAncestor(root->right,p,q);
            }
            else{
                return lowestCommonAncestor(root->left,p,q);
            }
        }
        
    }
};