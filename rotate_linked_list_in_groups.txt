Reverse a Linked List in groups of given size.

Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list.

Your Task:
You don't need to read input or print anything. Your task is to complete the function reverse() which should reverse the linked list in group of size k and return the head of the modified linked list.

Expected Time Complexity : O(N)
Expected Auxilliary Space : O(1)


    struct node* reverseList(struct node *head)
    {
        if(!head->next)
            return head;
        if(head->next && !head->next->next){
            head->next->next=head;
            struct node *start=head->next;
            head->next=NULL;
            return start;
        }
            
       struct node *prev,*curr,*future;
       prev=head;
       curr=head->next;
       future=head->next->next;
       
       while(future->next){
           curr->next=prev;
           prev=curr;
           curr=future;
           future=future->next;
       }
       curr->next=prev;
       future->next=curr;
       
       head->next=NULL;
       head=future;
       
       return head;
    }
    
    struct node *reverse (struct node *head, int k)
    { 
        if(k==1){
            return head;
        }
        struct node *temp=head,*nxt;
        for(int i=1;temp->next && i<k;i++){
            temp=temp->next;
        }
        
            nxt=temp->next;
            temp->next=NULL;
            struct node* links=reverseList(head);
            if(nxt!=NULL){
                head->next=reverse(nxt,k);
            }
            return links;
    }
};