Strongly Connected Components (Kosaraju's Algo)

public:
stack<int> S;
    int  flag=0;
	//Function to find number of strongly connected components in the graph.
    void dfs(int node, vector<int> adj[], vector<bool> &visited ){ //step 1-->initial dfs
        visited[node]=true;
        
        for(auto x:adj[node]){
            if(!visited[x]){
                dfs(x,adj,visited);
            }
        }
        
        if(!flag){
            S.push(node);
        }
    }
    
    void transpose_graph(vector<int> adj[],vector<int> _adj[],int V){ //reverse the direction of edge
        for(int i=0;i<V;i++){
            for(auto x:adj[i]){
                _adj[x].push_back(i);
            }
        }
    }
    
    
    
    int no_of_SCC(vector<int> _adj[],vector<bool> &visited2){ //pop element from stack and do dfs
        int res=0;
        while(!S.empty()){
            if(!visited2[S.top()]){
                dfs(S.top(),_adj,visited2);
                res++;
            }
            
            S.pop();
        }
        
        return res;
    }
    int kosaraju(int V, vector<int> adj[])
    {
        vector<bool> visited(V,false);
        vector<int> _adj[V];
        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs(i,adj,visited); //step1
                S.push(i);
            }
        }
        
        transpose_graph(adj,_adj,V); //step 2
        vector<bool> visited2(V,false);
        flag=1;
        return no_of_SCC(_adj,visited2); //step3
    }