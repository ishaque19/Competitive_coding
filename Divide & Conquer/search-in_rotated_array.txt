There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is 
[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

class Solution {
public:
    int helper(vector<int>& nums,int l,int h, int target){
        if(l>h)
            return -1;
        int mid=floor((l+h)/2);
        if(nums[mid]==target)
            return mid;
        
        else if(nums[l]<=nums[mid]){ //l to mid is sorted
            if(nums[l]<=target && target<=nums[mid])
                return helper(nums,l,mid-1,target);
            else
                return helper(nums,mid+1,h,target);
        }
        else //if(nums[mid+1]<=nums[h]){ //must be sorted for sure if above condition fails
        {
            if(nums[mid]<=target && target<=nums[h])
                return helper(nums,mid+1,h,target);
            else
                return helper(nums,l,mid-1,target);
        }
        //else{
          //  return -1;
        //}
    }
    int search(vector<int>& nums, int target) {
        if(nums.size()==1){
            if(nums[0]==target)
                return 0;
            else
                return -1;
        }
        return helper(nums,0,nums.size()-1,target);
    }
};
--------------------------------------------------------------------------
    /*also works for this one too**/
	int helper(vector<int>& nums,int l,int h, int target){
        if(l>h)
            return -1;
        int mid=floor((l+h)/2);
        if(nums[mid]==target)
            return mid;
        
        else if(nums[l]<=nums[mid]){ //l to mid is sorted
            if(nums[l]<=target && target<=nums[mid])
                return helper(nums,l,mid-1,target);
            else
                return helper(nums,mid+1,h,target);
        }
        else if(nums[mid+1]<=nums[h]){ //must be sorted for sure if above condition fails
        {
            if(nums[mid]<=target && target<=nums[h])
                return helper(nums,mid+1,h,target);
            else
                return helper(nums,l,mid-1,target);
        }
		else{
           return -1;
        }
    }
