Given N activities with their start and finish day given in array start[ ] and end[ ]. Select the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a given day.
Note : Duration of the activity includes both starting and ending day.

static bool duration(pair<int,int> a, pair<int,int> b){ //sort on end time
        return a.second<b.second;
    }
    int activitySelection(vector<int> start, vector<int> end, int n)
    {
        // Your code here
        int res=0;
        vector<pair<int,int>> activity(n,{0,0}); //initialized
        for(int i=0;i<n;i++){
            activity[i]=make_pair(start[i],end[i]);
        }
        sort(activity.begin(),activity.end(),duration);
        
        int prev_sel_end=INT_MIN;
        for(auto x:activity){
            //cout<<x.first<<" "<<x.second<<endl;
            if(x.first>prev_sel_end){
                res++;
                prev_sel_end=x.second;
            } 
            else{
                continue;
            }
        }
        
        return  res;
    }