You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right.
 You can only see the k numbers in the window. Each time the sliding window moves right by one position

return max sliding window.


class Solution {
public:
    deque<int> track;
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        if(k==1)
            return nums;
        if(k==nums.size()){
            //find max of the array and add to res and return
            int i=0;
            int max=nums[0];
            for(i=1;i<nums.size();i++){
                if(nums[i]>max)
                    max=nums[i];
            }
            res.push_back(max);
            return res;
        }
        for(int i=0;i<nums.size();i++){
            
            if(i!=0 && i>=k){
                if(!track.empty())
                    res.push_back(nums[track.front()]); // 3 3 5
                while(!track.empty() && track.front()<i-k+1){ //index which are not in  current window.
                    track.pop_front();
                }
            }
            
            if(i==0){
                track.push_back(i);                             //(0-1) //(1-3) //(1-3)(2--1) //(1-3)(2--1)(3--3) //(2--1)(3--3) 
                                                                //(4-5)
            }
            else{
                while(!track.empty() && nums[i]>=nums[track.back()]){
                    track.pop_back();
                }
                track.push_back(i);
            }
            
            
            
        }
        if(!track.empty())
                    res.push_back(nums[track.front()]);
        return res;
    }
};